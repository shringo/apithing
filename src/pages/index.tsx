import { SignInButton, SignOutButton, useUser } from "@clerk/clerk-react";
import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import { Dispatch, SetStateAction, useState } from "react";
import toast from "react-hot-toast";
import { LoadingPage, LoadingSpinner } from "~/components/loading";

import { RouterOutputs, api } from "~/utils/api";

export function PostToast(props: { input: string, setInput: Dispatch<SetStateAction<string>>}) {
  const { input, setInput } = props;
  const { user } = useUser();
  const ctx = api.useUtils();
  const { mutate, isLoading: isPosting } = api.post.create.useMutation({
    onSuccess: () => {
      setInput("");
      void ctx.post.getAll.invalidate();
    },
    onError: (e) => {
      const error = e.data?.zodError?.fieldErrors.content?.[0] ?? "Failed to post, try again later.";
      toast.error(error);
    },
  });
  if(!user) return null;

  return (
    <div className="flex gap-4 w-full">
      <Image src={user.imageUrl} className="w-12 h-12 rounded-full" alt={user.username + "'s profile picture"} width={56} height={56}/>
      <input 
        maxLength={255} 
        minLength={5} 
        placeholder="What is happening?" 
        className="bg-slate-900 rounded-3xl grow px-3"
        type="text"
        value={input}
        onKeyDown={(e) => {
          if(e.key === "Enter") {
            e.preventDefault();
            if(input.length) {
              mutate({ content: input });
            }
          }
        }}
        onChange={(e) => setInput(e.target.value)}
        disabled={isPosting}
      />
      {input !== "" && !isPosting && <button 
        className="bg-sky-600 rounded-3xl px-3"
        onClick={() => mutate({ content: input })}
        disabled={isPosting}
      >Tweet</button>}
      {isPosting && <div className="place-self-center"><LoadingSpinner size={25}/></div>}
    </div>
  )
}

export function ProcessDate(post: PostUser) {
  const { createdAt } = post.post;
  const diff = Date.now() - createdAt.getTime();

  var msg = "";

  if(diff < 5 * 1000) msg = "Moments ago";
  else if(diff < 60 * 1000) msg = Math.round(diff / 1000) + " seconds ago";
  else if(diff < 60 * 60 * 1000) msg = Math.round(diff / 1000 / 60) + " minutes ago";
  else if(diff < 24 * 60 * 60 * 1000) msg = Math.round(diff / 1000 / 60 / 60) + " hours ago";
  else if(diff < 7 * 24 * 60 * 60 * 1000) msg = Math.round(diff / 1000 / 60 / 60 / 24) + " days ago";
  else if(diff < 30 * 7 * 24 * 60 * 60 * 1000) msg = Math.round(diff / 1000 / 60 / 60 / 24 / 7) + " weeks ago";
  else if(diff < 365 * 24 * 60 * 60 * 1000) msg = Math.round(diff / 1000 / 60 / 60 / 24 / 7 / 30) + " months ago";
  else msg = Math.round(diff / 1000 / 60 / 60 / 24 / 365) + " years ago";

  return (
    <span className="font-light">{msg.startsWith('1') ? msg.replace("s ago", " ago") : msg}</span>
  )
}

type PostUser = RouterOutputs["post"]["getAll"][number];
export function PostView(props: PostUser) {
  const { post, author } = props;
  return (
    <div className="flex gap-3 p-4 border-b border-slate-400" key={post.id}>
      <Image src={author.avatar} className="w-12 h-12 rounded-full" alt={author.avatar + "'s profile picture"} width={56} height={56}/>
      <div className="flex flex-col">
        <div className="flex text-slate-300 gap-1">
          <Link href={'/@' + author.username}>
            <span>{'@' + author.username}</span>
          </Link>
          <span className="font-light">â€¢</span>
          <Link href={'/post/' + post.id}>
            <ProcessDate {...props}/>
          </Link>
        </div>
        <span className="text-l break-all whitespace-normal">{post.content}</span>
      </div>
    </div>
  );
}

export function Feed() {
  const { data, isLoading: postLoading } = api.post.getAll.useQuery();
  if(postLoading) return <LoadingPage/>;
  if(!data) return <div>No data available</div>;
  return (
    <div className="flex flex-col">
    {data.map((post) => (
      <PostView {...post} key={post.post.id}/>
    ))}
  </div>
  );
}

export default function Home() {
  const { user, isLoaded: userLoaded, isSignedIn } = useUser();
  const [ draftPost, setDraftPost ] = useState("");

  // cache the data
  api.post.getAll.useQuery();

  if(!userLoaded) return <div/>;

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex h-screen justify-center">
        <div className="w-full md:max-w-2xl border-x h-full border-slate-400">
          <div className="border-b border-slate-400 p-4 flex gap-5">
            {
              isSignedIn ? 
              <PostToast input={draftPost} setInput={setDraftPost}></PostToast> : 
              <div className="flex justify-center">{isSignedIn ? <SignOutButton></SignOutButton> : <SignInButton></SignInButton>}</div>
            }
          </div>
          <Feed/>
        </div>
      </main>
    </>
  );
}
